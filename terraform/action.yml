name: 'Terraform'
description: 'Terraform Github Actions'

inputs:
  aws-access-key-id:
    description: 'AWS access ID'
    required: true
  aws-secret-access-key:
    description: 'AWS access secret key'
    required: true
  aws-region:
    description: 'AWS region'
    required: true
    default: us-east-1
  country:
    description: 'Deployment country'
    required: true
  country-icon:
    description: 'Deployment country icon'
    required: true
  terraform-version:
    description: 'Terraform verision'
    required: true
  terraform-action:
    description: 'Terraform action (plan or apply)'
    required: true
    default: plan
  tf-var-variables:
    description: 'TF_VARS from secrets'
    required: true
  ssh-private-key:
    description: 'SSH key used for GitHub modules'
    required: true
  awscli-version:
    description: 'aws cli version'
    required: true
  teams-webhook:
    description: 'Teams webhook'
    requierd: false
  github-token:
    description: 'Github TOKEN'
    requierd: false

runs:
    using: "composite"
    steps:

    - name: 📒 Checkout repo
      uses: actions/checkout@v3

    - name: 🧰 Setup terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: 🧰 Setup node
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: 🧰 Install awscli
      shell: bash
      run: |
        curl -sL https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWSCLI_VERSION}.zip -o awscliv2.zip
        unzip awscliv2.zip
        sudo ./aws/install
      env:
        AWSCLI_VERSION: ${{ inputs.awscli-version }}

    - name: 🌧️ Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: 🧑‍🔧️ Setup SSH Keys and known_hosts (Using other module - github module)
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ inputs.ssh-private-key }}"

    - name: ✅ Terraform fmt
      shell: bash
      id: fmt
      run: |
        terraform fmt -recursive -no-color -check -diff
      continue-on-error: true

    - name: ⤵️ Download the tfvars files
      shell: bash
      run: |
        echo ${{ inputs.tf-var-variables }} | base64 -d > terraform.tfvars

    - name: 🏭 Terraform Init
      shell: bash
      id: init
      run: |
        terraform init
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      continue-on-error: true

    - name: ✅ Terraform Validate
      shell: bash
      id: validate
      run: |
        terraform validate -no-color
      continue-on-error: true

    - name: 📝 Terraform Plan
      shell: bash
      id: plan
      if: |
        inputs.terraform-aciton == 'plan'
      run: |
        terraform plan -no-color 2>&1 | tee /tmp/plan.txt
        sed -i '/Refreshing state.../d' /tmp/plan.txt
      continue-on-error: true

    - name: 🔰 Pull request comments
      if: github.event_name == 'pull_request' && inputs.github-action == 'plan'
      uses: actions/github-script@v4.0.2
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require("fs");
          const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
          <details><summary>Show Plan</summary>
            
          \`\`\`${ plan }\`\`\`
          </details>
            
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: ✅ Terraform fmt Status
      shell: bash
      if: steps.fmt.outcome == 'failure'
      run: |
        echo "Error: Terraform fmt fail"
        exit 1

    - name: ✅ Terraform Init Status
      shell: bash
      if: steps.init.outcome == 'failure'
      run: |
        echo "Error: Terraform init fail"
        exit 1

    - name: ✅ Terraform Validate Status
      shell: bash
      if: steps.validate.outcome
      run: |
        echo "Error: Terraform validate fail"
        exit 1

    - name: ✅ Terraform Plan Status
      shell: bash
      if: steps.plan.outcome == 'failure' && inputs.github-action == 'plan'
      run: |
        echo "Error: Terraform plan fail"
        exit 1

    - name: 💥 Terraform Apply
      shell: bash
      id: apply
      if: |
        inputs.terraform-actino == 'apply'
      run: |
        terraform apply -no-color -auto-approve

    - name:  🚀 Teams success ✅
      shell: bash
      if: success() && steps.apply.outcome == 'success'
      run: |
        curl --silent \
        --output /dev/null \
        --header 'content-type: application/json' \
        --url '${{ inputs.teams-webhook }}' \
        --data-raw '{  
        "@type": "MessageCard",  
        "@context": "http://schema.org/extensions",  
        "themeColor": "03fc28",
        "summary": "Infra terraform deployment (success) ✅",
        "sections": [{  
            "activityTitle": "Infra terraform deployment (success) ✅", 
            "facts": [ 
            {  
                "name": "Country",
                "value": "${{ inputs.country-icon }} ${{ inputs.country }}"
            },
            {
                "name": "Repository",
                "value": "${{ github.repository }}"
            },
            {  
                "name": "Triggered By",  
                "value": "@${{ github.actor }}"
            }],  
            "markdown": true  
          }]  
        }'
      continue-on-error: true
  
    - name:  🚀 Teams Failure ❌
      shell: bash
      if: failure() && steps.apply.outcome == 'failure'
      run: |
        curl --silent \
        --output /dev/null \
        --header 'content-type: application/json' \
        --url '${{ inputs.teams-webhook }}' \
        --data-raw '{  
        "@type": "MessageCard",  
        "@context": "http://schema.org/extensions",  
        "themeColor": "D70000",
        "summary": "Infra terraform deployment (failure) ❌",
        "sections": [{  
            "activityTitle": "Infra terraform deployment (failure) ❌", 
            "facts": [ 
            {  
                "name": "Country",
                "value": "${{ inputs.country-icon }} ${{ inputs.country }}"
            },
            {
                "name": "Repository",
                "value": "${{ github.repository }}"
            },
            {  
                "name": "Triggered By",  
                "value": "@${{ github.actor }}"
            }],  
            "markdown": true  
          }]  
        }'
      continue-on-error: true
